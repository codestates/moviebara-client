[{"/Users/munawiki/Desktop/moviebara-client/src/index.js":"1","/Users/munawiki/Desktop/moviebara-client/src/components/App.js":"2","/Users/munawiki/Desktop/moviebara-client/src/components/Header.js":"3","/Users/munawiki/Desktop/moviebara-client/src/components/Sign.js":"4","/Users/munawiki/Desktop/moviebara-client/src/components/Mypage.js":"5","/Users/munawiki/Desktop/moviebara-client/src/components/Main.js":"6","/Users/munawiki/Desktop/moviebara-client/src/components/Post.js":"7","/Users/munawiki/Desktop/moviebara-client/src/components/SignIn.js":"8","/Users/munawiki/Desktop/moviebara-client/src/components/Signup.js":"9","/Users/munawiki/Desktop/moviebara-client/src/components/MvPosts.js":"10","/Users/munawiki/Desktop/moviebara-client/src/components/MvList.js":"11","/Users/munawiki/Desktop/moviebara-client/src/components/PostList.js":"12","/Users/munawiki/Desktop/moviebara-client/src/components/NewReview.js":"13","/Users/munawiki/Desktop/moviebara-client/src/components/MvDesc.js":"14","/Users/munawiki/Desktop/moviebara-client/src/components/Userhome.js":"15","/Users/munawiki/Desktop/moviebara-client/src/components/UpdateReviewBox.js":"16","/Users/munawiki/Desktop/moviebara-client/src/modules/validators.js":"17","/Users/munawiki/Desktop/moviebara-client/src/modules/requestLogin.js":"18"},{"size":492,"mtime":1612962063824,"results":"19","hashOfConfig":"20"},{"size":3002,"mtime":1613276861921,"results":"21","hashOfConfig":"20"},{"size":2840,"mtime":1613275722166,"results":"22","hashOfConfig":"20"},{"size":12522,"mtime":1613132358661,"results":"23","hashOfConfig":"20"},{"size":2636,"mtime":1613277444929,"results":"24","hashOfConfig":"20"},{"size":1153,"mtime":1613276755481,"results":"25","hashOfConfig":"20"},{"size":1460,"mtime":1613226844737,"results":"26","hashOfConfig":"20"},{"size":3271,"mtime":1613276115110,"results":"27","hashOfConfig":"20"},{"size":1919,"mtime":1613223985820,"results":"28","hashOfConfig":"20"},{"size":6493,"mtime":1613234841759,"results":"29","hashOfConfig":"20"},{"size":553,"mtime":1613132896632,"results":"30","hashOfConfig":"20"},{"size":3610,"mtime":1613226245410,"results":"31","hashOfConfig":"20"},{"size":1340,"mtime":1613223283783,"results":"32","hashOfConfig":"20"},{"size":329,"mtime":1613132958232,"results":"33","hashOfConfig":"20"},{"size":5492,"mtime":1613234196355,"results":"34","hashOfConfig":"20"},{"size":1968,"mtime":1613227643842,"results":"35","hashOfConfig":"20"},{"size":605,"mtime":1613140347986,"results":"36","hashOfConfig":"20"},{"size":323,"mtime":1613277035749,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"kjes75",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/munawiki/Desktop/moviebara-client/src/index.js",[],["80","81"],"/Users/munawiki/Desktop/moviebara-client/src/components/App.js",["82","83","84"],"/Users/munawiki/Desktop/moviebara-client/src/components/Header.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Sign.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Mypage.js",["85","86","87"],"/Users/munawiki/Desktop/moviebara-client/src/components/Main.js",["88"],"/Users/munawiki/Desktop/moviebara-client/src/components/Post.js",["89","90","91","92"],"import styles from \"../css/post.module.css\";\nimport movies from \"../dummy/movies.json\";\nimport dummyImage from \"../dummy/images/1.jpg\";\n\nexport default function Post({ post }) {\n  return (\n    <div className={styles.box}>\n      <div className={styles.top}>\n        <div className={styles.profilePhotoBox}>\n          <img className={styles.profilePhoto} src={post.user.image}></img>\n        </div>\n        <div className={styles.nickName}>{post.user.nickname}</div>\n        <div className={styles.date}>{\"2020-02-20\"}</div>\n      </div>\n      <div className={styles.bottom}>\n        <div className={styles.bottomLeft}>\n          <img src={post.movie.image} className={styles.movieImage}></img>\n        </div>\n        <div className={styles.bottomRight}>\n          <div className={styles.movieTitle}>{post.movie.title}</div>\n          <div className={styles.movieReviewBox}>\n            <textarea className={styles.movieReview} value={post.text}>\n              {post.text}\n            </textarea>\n          </div>\n          <div className={styles.movieUtil}>\n            <div className={styles.awesome}>좋아요</div>\n            <div className={styles.tagBox}>\n              <div>tag1</div>\n              <div>tag2</div>\n              <div>tag3</div>\n            </div>\n            <div className={styles.scrap}>스크랩 {post.scrap}</div>\n            <div className={styles.report}>신고</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/SignIn.js",["93","94","95"],"/Users/munawiki/Desktop/moviebara-client/src/components/Signup.js",["96"],"import styles from \"../css/login.module.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function SignUp() {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [passwordCheck, setPasswordCheck] = useState();\n  const [nickName, setNickName] = useState();\n  const history = useHistory();\n\n  const submitSignup = () => {\n    const data = JSON.stringify({\n      nickname: nickName,\n      password: password,\n      email: email,\n    });\n\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/users/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      data: data,\n    };\n\n    axios(config)\n      .then(function (response) {\n        alert(\"회원가입이 완료되었습니다!\");\n        history.push(\"/signin\");\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"text\"\n          placeholder=\"email\"\n          onChange={(e) => setEmail(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          onChange={(e) => setPassword(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"password\"\n          placeholder=\"password check\"\n          onChange={(e) => setPasswordCheck(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"text\"\n          placeholder=\"nickname\"\n          onChange={(e) => setNickName(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.buttonBox}>\n        <button onClick={submitSignup}>SignUp</button>\n      </div>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/MvPosts.js",["97","98","99"],"import {\n  useParams,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport PostList from \"./PostList.js\";\nimport NewReview from \"./NewReview.js\";\nimport UpdateReviewBox from \"./UpdateReviewBox.js\";\nimport styles from \"../css/mvposts.module.css\";\n\nexport default function MvPosts({ userInfo }) {\n  const { id } = userInfo;\n  const { movieId } = useParams();\n  const match = useRouteMatch();\n\n  const [posts, setPosts] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [mvInfo, setMvInfo] = useState(null);\n  const [scraps, setScraps] = useState(null);\n  const [scraps_id, setScraps_id] = useState(null);\n\n  useEffect(() => {\n    if (isNaN(Number(movieId))) {\n      getDataTitle();\n    } else {\n      getData();\n    }\n  }, []);\n\n  const getData = async () => {\n    try {\n      setPosts(null);\n      setMvInfo(null);\n      setLoading(true);\n      setScraps([]);\n      setScraps_id([]);\n      await axios\n        .get(`https://api.moviebara.com/posts?movie_id=${movieId}`)\n        .then((res) => {\n          setPosts(res.data.data);\n        });\n      await axios\n        .get(`https://api.moviebara.com/movies?movie_id=${movieId}`)\n        .then((res) => {\n          setMvInfo(res.data.data);\n        });\n      await axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        });\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  };\n\n  const getDataTitle = async () => {\n    try {\n      setPosts(null);\n      setMvInfo(null);\n      setLoading(true);\n      setScraps([]);\n      setScraps_id([]);\n      await axios\n        .get(`https://api.moviebara.com/movies?movie_title=${movieId}`)\n        .then((res) => {\n          setMvInfo(res.data.data);\n\n          axios\n            .get(`https://api.moviebara.com/posts?movie_id=${res.data.data.id}`)\n            .then((res2) => {\n              setPosts(res2.data.data);\n            });\n        });\n\n      await axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        });\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  };\n\n  const handleDelete = (postId) => {\n    const data = JSON.stringify({ postId: postId });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/posts/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/posts?movie_id=${movieId}`)\n        .then((res) => {\n          setPosts(res.data.data);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  const handleScrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  const handleUnscrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  if (loading) return <div>로딩중</div>;\n  if (mvInfo === null && posts === null) {\n    return <div className={styles.contatiner}></div>;\n  } else {\n    return (\n      <div className={styles.contatiner}>\n        <div className={styles.mvInfo_box}>\n          <div className={styles.mvPoster}>\n            <img src={mvInfo.image} alt=\"영화 포스터\" />\n          </div>\n          <div className={styles.mvInfo}>\n            <p>\n              {mvInfo.title}, {mvInfo.year}{\" \"}\n            </p>\n            <p>장르 : {mvInfo.genre}</p>\n            <p>줄거리 : {mvInfo.summary}</p>\n          </div>\n        </div>\n        <div className={styles.posts_box}>\n          <Switch>\n            <Route exact path={match.path}>\n              <div className={styles.newReview_btn}>\n                <Link to={`${match.url}/create`}>리뷰 작성</Link>\n              </div>\n              <div className={styles.posts}>\n                <PostList\n                  posts={posts}\n                  userInfo={userInfo}\n                  deleteHandler={handleDelete}\n                  scraps_id={scraps_id}\n                  deleteHandler={handleDelete}\n                  scrapHandler={handleScrap}\n                  unscrapHandler={handleUnscrap}\n                />\n              </div>\n            </Route>\n            <Route path={`${match.path}/create`}>\n              <NewReview userInfo={userInfo} setPosts={setPosts} />\n            </Route>\n            <Route path={`${match.path}/:postId`}>\n              <UpdateReviewBox userInfo={userInfo} setPosts={setPosts} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/MvList.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/PostList.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/NewReview.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/MvDesc.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Userhome.js",["100","101"],"import { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport styles from \"../css/userhome.module.css\";\nimport PostList from \"./PostList\";\nimport UpdateReviewBox from \"./UpdateReviewBox\";\n\nexport default function Userhome({ userInfo }) {\n  const { id, nickname, image } = userInfo;\n  const match = useRouteMatch();\n  const [posts, setPosts] = useState(null);\n  const [scraps, setScraps] = useState([]);\n  const [scraps_id, setScraps_id] = useState([]);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const getPosts = async () => {\n    try {\n      // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n      setError(null);\n      setPosts(null);\n      setScraps([]);\n      setScraps_id([]);\n      setData(null);\n\n      // loading 상태를 true 로 바꿉니다.\n\n      const response = await axios.get(\n        `https://api.moviebara.com/posts?user_id=${id}`\n      );\n      const response2 = await axios.get(\n        `https://api.moviebara.com/scraps?user_id=${id}`\n      );\n\n      setPosts(response.data.data);\n      setData(response.data.data);\n      if (!response2.data.data) {\n        setScraps([]);\n        setScraps_id([]);\n      } else {\n        setScraps(response2.data.data);\n        const scrapIds = response2.data.data.map((p) => p.postId);\n        setScraps_id(scrapIds);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const handleDelete = (postId) => {\n    const data = JSON.stringify({ postId: postId });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/posts/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/posts?user_id=${id}`)\n        .then((res) => {\n          setData(res.data.data);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  const handleScrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n  const handleUnscrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n            setData([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n            setData(res.data.data);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  if (loading) return <div>로딩중..</div>;\n  if (error) return <div>에러 발생!!{error}</div>;\n  // if (!posts || !scraps) return null;\n  return (\n    <div className={styles.container}>\n      <div className={styles.userInfoBox}>\n        <div>\n          <div className={styles.img_box}>\n            <img className={styles.img} src={image} alt=\"사용자 프로필 사진\" />\n          </div>\n          <div className={styles.info_box}>\n            <p>{nickname}</p>\n            <p>\n              내가 쓴 리뷰 : {!posts ? 0 : posts.length} 스크랩 :\n              {!scraps ? 0 : scraps.length}\n            </p>\n          </div>\n        </div>\n\n        <div className={styles.links_Box}>\n          <div className={styles.myReview_link}>\n            <button\n              onClick={() => {\n                setData(posts);\n              }}\n            >\n              내가 쓴 리뷰\n            </button>\n          </div>\n          <div className={styles.myScrap_link}>\n            <button\n              onClick={() => {\n                setData(scraps);\n              }}\n            >\n              스크랩\n            </button>\n          </div>\n        </div>\n      </div>\n      <Switch>\n        <Route exact path={match.path}>\n          <div className={styles.posts_box}>\n            <PostList\n              posts={data}\n              userInfo={userInfo}\n              scraps_id={scraps_id}\n              deleteHandler={handleDelete}\n              scrapHandler={handleScrap}\n              unscrapHandler={handleUnscrap}\n            />\n          </div>\n        </Route>\n        <Route path={`${match.path}/:postId`}>\n          <UpdateReviewBox userInfo={userInfo} setPosts={setData} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/UpdateReviewBox.js",["102","103"],"import styles from \"../css/updatereviewbox.module.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams, useRouteMatch } from \"react-router-dom\";\nimport axios from \"axios\";\n\nexport default function UpdateReviewBox({ userInfo, setPosts }) {\n  const { postId } = useParams();\n  const [text, setText] = useState(\"\");\n  const [movieId, setMovieId] = useState(\"\");\n  const history = useHistory();\n  const match = useRouteMatch();\n  useEffect(() => {\n    const getMovieId = async () => {\n      await axios\n        .get(`https://api.moviebara.com/posts?user_id=${userInfo.id}`)\n        .then((res) => {\n          const post = res.data.data.filter((p) => p.id === Number(postId))[0];\n\n          const movieTitle = post.movie.title;\n          axios\n            .get(`https://api.moviebara.com/movies?movie_title=${movieTitle}`)\n            .then((res) => setMovieId(res.data.data.id));\n        });\n    };\n    getMovieId();\n  }, []);\n\n  const handleSubmit = () => {\n    const data = JSON.stringify({\n      userId: userInfo.id,\n      movieId: Number(movieId),\n      postId,\n      rate: 8.3,\n      text,\n    });\n\n    const config = {\n      method: \"patch\",\n      url: \"https://api.moviebara.com/posts/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      data,\n    };\n\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/posts?movie_id=${movieId}`)\n        .then((res) => {\n          setPosts(res.data.data);\n          history.push(`/main/${movieId}`);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n  return (\n    <div className={styles.contatiner}>\n      <div className={styles.text_box}>\n        <textarea\n          onChange={(e) => {\n            setText(e.target.value);\n          }}\n        />\n      </div>\n      <button className={styles.submit} onClick={handleSubmit}>\n        리뷰 수정\n      </button>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/modules/validators.js",[],"/Users/munawiki/Desktop/moviebara-client/src/modules/requestLogin.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":9,"column":17,"nodeType":"110","messageId":"111","endLine":9,"endColumn":26},{"ruleId":"108","severity":1,"message":"112","line":77,"column":10,"nodeType":"110","messageId":"111","endLine":77,"endColumn":14},{"ruleId":"108","severity":1,"message":"113","line":81,"column":10,"nodeType":"110","messageId":"111","endLine":81,"endColumn":15},{"ruleId":"108","severity":1,"message":"114","line":13,"column":10,"nodeType":"110","messageId":"111","endLine":13,"endColumn":23},{"ruleId":"115","severity":1,"message":"116","line":20,"column":6,"nodeType":"117","endLine":20,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":62,"column":9,"nodeType":"121","endLine":62,"endColumn":68},{"ruleId":"115","severity":1,"message":"122","line":18,"column":6,"nodeType":"117","endLine":18,"endColumn":8,"suggestions":"123"},{"ruleId":"108","severity":1,"message":"124","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":14},{"ruleId":"108","severity":1,"message":"125","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":10,"column":11,"nodeType":"121","endLine":10,"endColumn":70},{"ruleId":"119","severity":1,"message":"120","line":17,"column":11,"nodeType":"121","endLine":17,"endColumn":69},{"ruleId":"108","severity":1,"message":"126","line":5,"column":10,"nodeType":"110","messageId":"111","endLine":5,"endColumn":24},{"ruleId":"108","severity":1,"message":"127","line":5,"column":26,"nodeType":"110","messageId":"111","endLine":5,"endColumn":43},{"ruleId":"108","severity":1,"message":"128","line":12,"column":20,"nodeType":"110","messageId":"111","endLine":12,"endColumn":31},{"ruleId":"108","severity":1,"message":"114","line":9,"column":10,"nodeType":"110","messageId":"111","endLine":9,"endColumn":23},{"ruleId":"108","severity":1,"message":"129","line":23,"column":10,"nodeType":"110","messageId":"111","endLine":23,"endColumn":16},{"ruleId":"115","severity":1,"message":"130","line":32,"column":6,"nodeType":"117","endLine":32,"endColumn":8,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":219,"column":19,"nodeType":"134","endLine":219,"endColumn":47},{"ruleId":"108","severity":1,"message":"135","line":15,"column":19,"nodeType":"110","messageId":"111","endLine":15,"endColumn":29},{"ruleId":"115","severity":1,"message":"136","line":53,"column":6,"nodeType":"117","endLine":53,"endColumn":8,"suggestions":"137"},{"ruleId":"108","severity":1,"message":"138","line":12,"column":9,"nodeType":"110","messageId":"111","endLine":12,"endColumn":14},{"ruleId":"115","severity":1,"message":"139","line":27,"column":6,"nodeType":"117","endLine":27,"endColumn":8,"suggestions":"140"},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'About' is defined but never used.","'passwordCheck' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'props.setIsLogin', and 'props.setUserInfo'. Either include them or remove the dependency array.","ArrayExpression",["143"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'history', 'setIsLogin', and 'setUserInfo'. Either include them or remove the dependency array.",["144"],"'movies' is defined but never used.","'dummyImage' is defined but never used.","'emailValidator' is defined but never used.","'passwordValidator' is defined but never used.","'setWarnings' is assigned a value but never used.","'scraps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getData', 'getDataTitle', and 'movieId'. Either include them or remove the dependency array.",["145"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.",["146"],"'match' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'postId' and 'userInfo.id'. Either include them or remove the dependency array.",["147"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [history, props.setIsLogin, props.setUserInfo]",{"range":"158","text":"159"},"Update the dependencies array to be: [history, setIsLogin, setUserInfo]",{"range":"160","text":"161"},"Update the dependencies array to be: [getData, getDataTitle, movieId]",{"range":"162","text":"163"},"Update the dependencies array to be: [getPosts]",{"range":"164","text":"165"},"Update the dependencies array to be: [postId, userInfo.id]",{"range":"166","text":"167"},[796,798],"[history, props.setIsLogin, props.setUserInfo]",[606,608],"[history, setIsLogin, setUserInfo]",[850,852],"[getData, getDataTitle, movieId]",[1533,1535],"[getPosts]",[955,957],"[postId, userInfo.id]"]