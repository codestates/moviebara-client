[{"/Users/munawiki/Desktop/moviebara-client/src/index.js":"1","/Users/munawiki/Desktop/moviebara-client/src/components/App.js":"2","/Users/munawiki/Desktop/moviebara-client/src/components/Header.js":"3","/Users/munawiki/Desktop/moviebara-client/src/components/Sign.js":"4","/Users/munawiki/Desktop/moviebara-client/src/components/Mypage.js":"5","/Users/munawiki/Desktop/moviebara-client/src/components/Main.js":"6","/Users/munawiki/Desktop/moviebara-client/src/components/Post.js":"7","/Users/munawiki/Desktop/moviebara-client/src/components/SignIn.js":"8","/Users/munawiki/Desktop/moviebara-client/src/components/Signup.js":"9","/Users/munawiki/Desktop/moviebara-client/src/components/MvPosts.js":"10","/Users/munawiki/Desktop/moviebara-client/src/components/MvList.js":"11","/Users/munawiki/Desktop/moviebara-client/src/components/PostList.js":"12","/Users/munawiki/Desktop/moviebara-client/src/components/NewReview.js":"13","/Users/munawiki/Desktop/moviebara-client/src/components/MvDesc.js":"14","/Users/munawiki/Desktop/moviebara-client/src/components/MvRate.js":"15","/Users/munawiki/Desktop/moviebara-client/src/components/Userhome.js":"16","/Users/munawiki/Desktop/moviebara-client/src/components/UpdateReviewBox.js":"17","/Users/munawiki/Desktop/moviebara-client/src/modules/validators.js":"18"},{"size":492,"mtime":1612962063824,"results":"19","hashOfConfig":"20"},{"size":2573,"mtime":1613136577930,"results":"21","hashOfConfig":"20"},{"size":8346,"mtime":1613178285829,"results":"22","hashOfConfig":"20"},{"size":12522,"mtime":1613132358661,"results":"23","hashOfConfig":"20"},{"size":2383,"mtime":1613145291246,"results":"24","hashOfConfig":"20"},{"size":945,"mtime":1613176436591,"results":"25","hashOfConfig":"20"},{"size":1443,"mtime":1613132358659,"results":"26","hashOfConfig":"20"},{"size":2347,"mtime":1613145670652,"results":"27","hashOfConfig":"20"},{"size":1919,"mtime":1613145321379,"results":"28","hashOfConfig":"20"},{"size":5730,"mtime":1613176045927,"results":"29","hashOfConfig":"20"},{"size":553,"mtime":1613132896632,"results":"30","hashOfConfig":"20"},{"size":3686,"mtime":1613175979174,"results":"31","hashOfConfig":"20"},{"size":1933,"mtime":1613175979180,"results":"32","hashOfConfig":"20"},{"size":329,"mtime":1613132958232,"results":"33","hashOfConfig":"20"},{"size":1252,"mtime":1613132358652,"results":"34","hashOfConfig":"20"},{"size":6623,"mtime":1613175979179,"results":"35","hashOfConfig":"20"},{"size":3985,"mtime":1613175979174,"results":"36","hashOfConfig":"20"},{"size":605,"mtime":1613140347986,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"kjes75",{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/munawiki/Desktop/moviebara-client/src/index.js",[],["84","85"],"/Users/munawiki/Desktop/moviebara-client/src/components/App.js",["86","87","88","89"],"import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport Sign from \"./Sign.js\";\nimport styles from \"../css/app.module.css\";\nimport Header from \"./Header.js\";\nimport Main from \"./Main.js\";\nimport MyPage from \"./Mypage.js\";\nimport Post from \"./Post.js\";\nimport Userhome from \"./Userhome.js\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function App() {\n  const [isLogin, setIsLogin] = useState();\n  const [userInfo, setUserInfo] = useState(null);\n\n  return (\n    <Router>\n      <div className={styles.container}>\n        <nav className={styles.nav}>\n          <Header isLogin={isLogin} userInfo={userInfo} />\n        </nav>\n        <div className={styles.pages}>\n          <Switch>\n            <Route path=\"/mypage\">\n              <MyPage userInfo={userInfo} setUserInfo={setUserInfo} />\n            </Route>\n            <Route path=\"/userhome\">\n              <Userhome userInfo={userInfo} />\n            </Route>\n            <Route path=\"/topics\">\n              <Topics />\n            </Route>\n            <Route path=\"/main\">\n              <Main userInfo={userInfo} />\n            </Route>\n            <Route path=\"/post\">\n              <Post />\n            </Route>\n            <Route path=\"/\">\n              <Sign\n                isLogin={isLogin}\n                setIsLogin={setIsLogin}\n                setUserInfo={setUserInfo}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Topics() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      {/* The Topics page has its own <Switch> with more routes\n          that build on the /topics URL path. You can think of the\n          2nd <Route> here as an \"index\" page for all topics, or\n          the page that is shown when no topic is selected */}\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/Header.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Sign.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Mypage.js",["90","91","92"],"import styles from \"../css/mypage.module.css\";\nimport movies from \"../dummy/movies.json\";\nimport React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCamera } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\n\nexport default function MyPage(props) {\n  const [nickname, setNickname] = useState();\n  const [password, setPassword] = useState();\n  const [passwordCheck, setPasswordCheck] = useState();\n  const [image, setImage] = useState(movies.movies[0].image);\n\n  const submitModified = () => {\n    const formData = new FormData();\n\n    formData.append(\"image\", image);\n    formData.append(\"nickname\", nickname);\n    formData.append(\"password\", password);\n\n    const config = {\n      method: \"patch\",\n      url: \"https://api.moviebara.com/users/\",\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      data: formData,\n    };\n\n    axios(config)\n      .then((response) => {\n        console.log(response.data);\n        axios.get(\"https://api.moviebara.com/users/\").then((res) => {\n          props.setUserInfo(res.data.data);\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const fileInput = React.createRef();\n\n  const imageChangeHandler = () => {\n    setImage(fileInput.current.files[0]);\n  };\n\n  return (\n    <div className={styles.box}>\n      <label htmlFor=\"fileUploader\" className={styles.profileLabel}>\n        <div className={styles.profileFilter}>\n          <FontAwesomeIcon icon={faCamera} size=\"3x\" />\n        </div>\n        <img src={props.userInfo.image} className={styles.profile}></img>\n      </label>\n      <div>{props.userInfo.email}</div>\n      <input\n        type=\"file\"\n        onChange={imageChangeHandler}\n        ref={fileInput}\n        className={styles.fileUploader}\n        id=\"fileUploader\"\n      ></input>\n      <input\n        type=\"text\"\n        placeholder=\"nickname\"\n        onChange={(e) => setNickname(e.target.value)}\n      ></input>\n      <input\n        type=\"password\"\n        placeholder=\"password\"\n        onChange={(e) => setPassword(e.target.value)}\n      ></input>\n      <input\n        type=\"password\"\n        placeholder=\"password check\"\n        onChange={(e) => setPasswordCheck(e.target.value)}\n      ></input>\n      <button onClick={submitModified}>Modified</button>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/Main.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Post.js",["93","94","95"],"import styles from \"../css/post.module.css\";\nimport movies from \"../dummy/movies.json\";\nimport dummyImage from \"../dummy/images/1.jpg\";\n\nexport default function Post({ post }) {\n  return (\n    <div className={styles.box}>\n      <div className={styles.top}>\n        <div className={styles.profilePhotoBox}>\n          <img className={styles.profilePhoto} src={dummyImage}></img>\n        </div>\n        <div className={styles.nickName}>{post.user.nickname}</div>\n        <div className={styles.date}>{\"2020-02-20\"}</div>\n      </div>\n      <div className={styles.bottom}>\n        <div className={styles.bottomLeft}>\n          <img src={dummyImage} className={styles.movieImage}></img>\n        </div>\n        <div className={styles.bottomRight}>\n          <div className={styles.movieTitle}>영화제목</div>\n          <div className={styles.movieReviewBox}>\n            <textarea className={styles.movieReview} value={post.text}>\n              {post.text}\n            </textarea>\n          </div>\n          <div className={styles.movieUtil}>\n            <div className={styles.awesome}>좋아요</div>\n            <div className={styles.tagBox}>\n              <div>tag1</div>\n              <div>tag2</div>\n              <div>tag3</div>\n            </div>\n            <div className={styles.scrap}>스크랩 {post.scrap}</div>\n            <div className={styles.report}>신고</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/SignIn.js",["96","97","98"],"import styles from \"../css/login.module.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { emailValidator, passwordValidator } from \"../modules/validators.js\";\n\nexport default function SignIn(props) {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const history = useHistory();\n  const [warnings, setWarnings] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const submitLogin = () => {\n    // if (!emailValidator(email)) {\n    //   setWarnings({\n    //     email: \"올바른 이메일 형식이 아닙니다.\",\n    //     password: \"\",\n    //   });\n    // } else if (!passwordValidator(password)) {\n    //   setWarnings({\n    //     email: \"\",\n    //     password:\n    //       \"올바른 비밀번호 형식이 아닙니다. 숫자와 문자 포함 6~12자리 이내의 암호\",\n    //   });\n    // } else {\n    //   setWarnings({ email: \"\", password: \"\" });\n\n    const data = JSON.stringify({\n      password: password,\n      email: email,\n    });\n\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/login/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      data,\n    };\n\n    axios(config)\n      .then(() => {\n        axios\n          .get(\"https://api.moviebara.com/users/\")\n          .then((res) => {\n            props.setIsLogin(true);\n            props.setUserInfo(res.data.data);\n\n            history.push(\"/\");\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      })\n      .catch((error) => {\n        alert(\"회원정보가 일치하지 않습니다.\");\n      });\n    // }\n  };\n\n  return (\n    <div className={styles.signInBox}>\n      <div className={styles.inputBox}>\n        <input\n          type=\"text\"\n          placeholder=\"email\"\n          onChange={(e) => setEmail(e.target.value)}\n        ></input>\n        <div>{warnings.email}</div>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          onChange={(e) => setPassword(e.target.value)}\n        ></input>\n        <div>{warnings.password}</div>\n      </div>\n      <div className={styles.buttonBox}>\n        <button onClick={submitLogin}>SignIn</button>\n      </div>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/Signup.js",["99"],"import styles from \"../css/login.module.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function SignUp() {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [passwordCheck, setPasswordCheck] = useState();\n  const [nickName, setNickName] = useState();\n  const history = useHistory();\n\n  const submitSignup = () => {\n    const data = JSON.stringify({\n      nickname: nickName,\n      password: password,\n      email: email,\n    });\n\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/users/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      data: data,\n    };\n\n    axios(config)\n      .then(function (response) {\n        alert(\"회원가입이 완료되었습니다!\");\n        history.push(\"/signin\");\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"text\"\n          placeholder=\"email\"\n          onChange={(e) => setEmail(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          onChange={(e) => setPassword(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"password\"\n          placeholder=\"password check\"\n          onChange={(e) => setPasswordCheck(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.inputBox}>\n        <input\n          type=\"text\"\n          placeholder=\"nickname\"\n          onChange={(e) => setNickName(e.target.value)}\n        ></input>\n      </div>\n      <div className={styles.buttonBox}>\n        <button onClick={submitSignup}>SignUp</button>\n      </div>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/MvPosts.js",["100","101","102"],"import {\n  useParams,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport PostList from \"./PostList.js\";\nimport NewReview from \"./NewReview.js\";\nimport UpdateReviewBox from \"./UpdateReviewBox.js\";\nimport styles from \"../css/mvposts.module.css\";\n\nexport default function MvPosts({ userInfo }) {\n  const { id } = userInfo;\n  const { movieId } = useParams();\n  const match = useRouteMatch();\n\n  const [posts, setPosts] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [mvInfo, setMvInfo] = useState(null);\n  const [scraps, setScraps] = useState(null);\n  const [scraps_id, setScraps_id] = useState(null);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    try {\n      setPosts(null);\n      setMvInfo(null);\n      setLoading(true);\n      setScraps([]);\n      setScraps_id([]);\n      await axios\n        .get(`https://api.moviebara.com/posts?movie_id=${movieId}`)\n        .then((res) => {\n          console.log(res.data.data);\n          setPosts(res.data.data);\n        });\n      await axios\n        .get(`https://api.moviebara.com/movies?movie_id=${movieId}`)\n        .then((res) => {\n          console.log(res.data.data);\n          setMvInfo(res.data.data);\n        });\n      await axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          console.log(res.status);\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        });\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  };\n\n  const handleDelete = (postId) => {\n    console.log(\"delete from mvposts\");\n    const data = JSON.stringify({ postId: postId });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/posts/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/posts?movie_id=${movieId}`)\n        .then((res) => {\n          console.log(\"what the ffffffffffffffffff\");\n          setPosts(res.data.data);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  const handleScrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          console.log(res.status);\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  const handleUnscrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          console.log(res.status);\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  if (loading) return <div>로딩중</div>;\n  if (mvInfo === null && posts === null) {\n    return <div className={styles.contatiner}></div>;\n  } else {\n    return (\n      <div className={styles.contatiner}>\n        <div className={styles.mvInfo_box}>\n          <div className={styles.mvPoster}>\n            <img src={mvInfo.image} alt=\"영화 포스터\" />\n          </div>\n          <div className={styles.mvInfo}>\n            <p>\n              {mvInfo.title}, {mvInfo.year}{\" \"}\n            </p>\n            <p>장르 : {mvInfo.genre}</p>\n            <p>줄거리 : {mvInfo.summary}</p>\n          </div>\n        </div>\n        <div className={styles.posts_box}>\n          <Switch>\n            <Route exact path={match.path}>\n              <div className={styles.newReview_btn}>\n                <Link to={`${match.url}/create`}>리뷰 작성</Link>\n              </div>\n              <div className={styles.posts}>\n                <PostList\n                  posts={posts}\n                  userInfo={userInfo}\n                  deleteHandler={handleDelete}\n                  scraps_id={scraps_id}\n                  deleteHandler={handleDelete}\n                  scrapHandler={handleScrap}\n                  unscrapHandler={handleUnscrap}\n                />\n              </div>\n            </Route>\n            <Route path={`${match.path}/create`}>\n              <NewReview userInfo={userInfo} setPosts={setPosts} />\n            </Route>\n            <Route path={`${match.path}/:postId`}>\n              <UpdateReviewBox userInfo={userInfo} setPosts={setPosts} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/MvList.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/PostList.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/NewReview.js",["103","104"],"import styles from \"../css/newreview.module.css\";\nimport MvRate from \"./MvRate.js\";\nimport React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nexport default function NewReview({ userInfo, setPosts }) {\n  const [clicked, setClicked] = useState([false, false, false, false, false]);\n  const [text, setText] = useState(\"\");\n  const history = useHistory();\n  const { movieId } = useParams();\n  const handleStarClick = (e, index) => {\n    e.preventDefault();\n    let clickStates = [...clicked];\n    for (let i = 0; i < 5; i++) {\n      if (i <= index) clickStates[i] = true;\n      else clickStates[i] = false;\n    }\n    setClicked(clickStates);\n  };\n\n  const handleSubmit = () => {\n    const data = JSON.stringify({\n      userId: userInfo.id,\n      movieId: Number(movieId),\n      rate: 8.3,\n      text,\n    });\n\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/posts/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/posts?movie_id=${movieId}`)\n        .then((res) => {\n          console.log(\"what the ffffffffffffffffff\");\n          setPosts(res.data.data);\n          history.push(`/main/${movieId}`);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  return (\n    <div className={styles.contatiner}>\n      <div className={styles.rating_box}>\n        {/* <p>영화 평점</p> */}\n        {/* <MvRate handleStarClick={handleStarClick} clicked={clicked} /> */}\n      </div>\n      <div className={styles.text_box}>\n        <textarea\n          onChange={(e) => {\n            setText(e.target.value);\n          }}\n        />\n      </div>\n      <button className={styles.submit} onClick={handleSubmit}>\n        리뷰 등록\n      </button>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/MvDesc.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/MvRate.js",[],"/Users/munawiki/Desktop/moviebara-client/src/components/Userhome.js",["105","106","107","108","109","110","111","112","113"],"import {\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n  useHistory,\n} from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport styles from \"../css/userhome.module.css\";\nimport PostList from \"./PostList\";\nimport UpdateReviewBox from \"./UpdateReviewBox\";\n\nexport default function Userhome({ userInfo }) {\n  const { id, nickname, image } = userInfo;\n  const match = useRouteMatch();\n  const [posts, setPosts] = useState(null);\n  const [scraps, setScraps] = useState([]);\n  const [scraps_id, setScraps_id] = useState([]);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [filtered, setFiltered] = useState(null);\n  const [genres, setGenres] = useState(null);\n  const history = useHistory();\n\n  const getGenreArray = (reviews) => {\n    const temp = reviews.map((p) => p.movie.genre);\n\n    setGenres([...new Set(temp)]);\n  };\n\n  const getPosts = async () => {\n    try {\n      // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n      setError(null);\n      setPosts(null);\n      setScraps([]);\n      setScraps_id([]);\n      setData(null);\n\n      // loading 상태를 true 로 바꿉니다.\n\n      const response = await axios.get(\n        `https://api.moviebara.com/posts?user_id=${id}`\n      );\n      const response2 = await axios.get(\n        `https://api.moviebara.com/scraps?user_id=${id}`\n      );\n      console.log(response.data.data);\n      console.log(response2.data.data);\n      setPosts(response.data.data);\n      setData(response.data.data);\n      if (!response2.data.data) {\n        setScraps([]);\n        setScraps_id([]);\n      } else {\n        setScraps(response2.data.data);\n        const scrapIds = response2.data.data.map((p) => p.postId);\n        setScraps_id(scrapIds);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const filtPosts = (genre) => {\n    const filteredPosts = posts.filter((p) => p.movie.genre === genre);\n\n    setFiltered(filteredPosts);\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const handleDelete = (postId) => {\n    console.log(\"delete from userhome\");\n    const data = JSON.stringify({ postId: postId });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/posts/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/posts?user_id=${id}`)\n        .then((res) => {\n          console.log(\"what the ffffffffffffffffff\");\n          setPosts(res.data.data);\n          setData(res.data.data);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  const handleScrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"post\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          console.log(res.status);\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n  const handleUnscrap = (postId) => {\n    const data = JSON.stringify({ postId: postId, userId: id });\n    const config = {\n      method: \"delete\",\n      url: \"https://api.moviebara.com/scraps/\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      data,\n    };\n    axios(config).then((res) => {\n      axios\n        .get(`https://api.moviebara.com/scraps?user_id=${id}`)\n        .then((res) => {\n          console.log(res.status);\n          if (!res.data.data) {\n            setScraps([]);\n            setScraps_id([]);\n            setData([]);\n          } else {\n            setScraps(res.data.data);\n            const scrapIds = res.data.data.map((p) => p.postId);\n            setScraps_id(scrapIds);\n            setData(res.data.data);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    });\n  };\n\n  if (loading) return <div>로딩중..</div>;\n  if (error) return <div>에러 발생!!{error}</div>;\n  // if (!posts || !scraps) return null;\n  return (\n    <div className={styles.container}>\n      <div className={styles.userInfo_box}>\n        <div className={styles.img_box}>\n          <img className={styles.img} src={image} alt=\"사용자 프로필 사진\" />\n        </div>\n        <div className={styles.info_box}>\n          <p>{nickname}</p>\n          <p>\n            내가 쓴 리뷰 : {!posts ? 0 : posts.length} 스크랩 :\n            {!scraps ? 0 : scraps.length}\n          </p>\n        </div>\n      </div>\n\n      <div className={styles.links_Box}>\n        <div className={styles.myReview_link}>\n          <button\n            onClick={() => {\n              setData(posts);\n            }}\n          >\n            내가 쓴 리뷰\n          </button>\n        </div>\n        <div className={styles.myScrap_link}>\n          <button\n            onClick={() => {\n              setData(scraps);\n              console.log(scraps_id);\n            }}\n          >\n            스크랩\n          </button>\n        </div>\n      </div>\n      <Switch>\n        <Route exact path={match.path}>\n          {/* <div className={styles.genreFilter_box}>\n            <div className={styles.genre_tag} onClick={setFiltered(posts)}>\n              모든 장르\n            </div>\n            {genres.map((g) => (\n              <div\n                key={genres.indexOf(g)}\n                className={styles.genre_tag}\n                onClick={filtPosts(g, posts)}\n              >\n                {g}\n              </div>\n            ))}\n          </div> */}\n          <div className={styles.posts_box}>\n            <PostList\n              posts={data}\n              userInfo={userInfo}\n              scraps_id={scraps_id}\n              deleteHandler={handleDelete}\n              scrapHandler={handleScrap}\n              unscrapHandler={handleUnscrap}\n            />\n          </div>\n        </Route>\n        <Route path={`${match.path}/:postId`}>\n          <UpdateReviewBox userInfo={userInfo} setPosts={setData} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/components/UpdateReviewBox.js",["114","115","116"],"import styles from \"../css/updatereviewbox.module.css\";\nimport MvRate from \"./MvRate.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams, useRouteMatch } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// export default function UpdateReviewBox() {\n//   const [clicked, setClicked] = useState([false, false, false, false, false]);\n//   const [text, setText] = useState(\"\");\n\n//   const history = useHistory();\n//   const { postId } = useParams();\n\n//   useEffect(() => {\n//     getPost();\n//   });\n\n//   const getPost = () => {\n//     axios.get(`http://localhost:4000/posts?user_id=${userId}`).then((res) => {\n//       if (res.status === 200) {\n//         let post = res.data.post.filter((p) => p.movie_id === movieId);\n//         setText(post.text);\n\n//         let postRate = clicked.slice();\n//         for (let i = 0; i < post.rate; i++) {\n//           postRate[i] = true;\n//         }\n//         setClicked(postRate);\n//       }\n//     });\n//   };\n\n//   const handleStarClick = (e, index) => {\n//     e.preventDefault();\n//     let clickStates = [...clicked];\n//     for (let i = 0; i < 5; i++) {\n//       if (i <= index) clickStates[i] = true;\n//       else clickStates[i] = false;\n//     }\n//     setClicked(clickStates);\n//   };\n\n//   const handleSubmit = () => {\n//     axios\n//       .patch(`http://localhost:4000/posts`, {\n//         userId,\n//         movieId,\n//         rate: clicked.filter((e) => e === true).length,\n//         text,\n//       })\n//       .then(history.push(\"/main\"));\n//   };\n\n//   return (\n//     <div className={styles.contatiner}>\n//       <div className={styles.rating_box}>\n//         <p>영화 평점</p>\n//         <MvRate handleStarClick={handleStarClick} clicked={clicked} />\n//       </div>\n//       <div className={styles.text_box}>\n//         <input\n//           type=\"text\"\n//           value={text}\n//           onChange={(e) => setText(e.target.value)}\n//         />\n//       </div>\n//       <form className={styles.submit} onClick={handleSubmit}>\n//         리뷰 수정\n//       </form>\n//     </div>\n//   );\n// }\n\nexport default function UpdateReviewBox({ userInfo, setPosts }) {\n  const { postId } = useParams();\n  const [text, setText] = useState(\"\");\n  const [movieId, setMovieId] = useState(\"\");\n  const history = useHistory();\n  const match = useRouteMatch();\n  const handleSubmit = () => {\n    const getMovieId = async () => {\n      await axios\n        .get(`http://localhost:4000/posts?user_id=${userInfo.id}`)\n        .then((res) => {\n          console.log(res.data.data);\n          console.log(postId);\n          const post = res.data.data.filter((p) => p.id === Number(postId))[0];\n          console.log(post);\n          const movieTitle = post.movie.title;\n          axios\n            .get(`http://localhost:4000/movies?movie_title=${movieTitle}`)\n            .then((res) => setMovieId(res.data.data.id));\n        });\n      const data = JSON.stringify({\n        userId: userInfo.id,\n        movieId: Number(movieId),\n        rate: 8.3,\n        text,\n      });\n\n      const config = {\n        method: \"patch\",\n        url: \"http://localhost:4000/posts/\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n\n        data,\n      };\n\n      axios(config).then((res) => {\n        axios\n          .get(`http://localhost:4000/posts?movie_id=${movieId}`)\n          .then((res) => {\n            console.log(movieId);\n            setPosts(res.data.data);\n            history.push(`/main/${movieId}`);\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      });\n    };\n    getMovieId();\n  };\n  return (\n    <div className={styles.contatiner}>\n      <div className={styles.text_box}>\n        <textarea\n          onChange={(e) => {\n            setText(e.target.value);\n          }}\n        />\n      </div>\n      <button className={styles.submit} onClick={handleSubmit}>\n        리뷰 수정\n      </button>\n    </div>\n  );\n}\n","/Users/munawiki/Desktop/moviebara-client/src/modules/validators.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":9,"column":17,"nodeType":"123","messageId":"124","endLine":9,"endColumn":26},{"ruleId":"121","severity":1,"message":"125","line":17,"column":10,"nodeType":"123","messageId":"124","endLine":17,"endColumn":20},{"ruleId":"121","severity":1,"message":"126","line":60,"column":10,"nodeType":"123","messageId":"124","endLine":60,"endColumn":14},{"ruleId":"121","severity":1,"message":"127","line":64,"column":10,"nodeType":"123","messageId":"124","endLine":64,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":3,"column":27,"nodeType":"123","messageId":"124","endLine":3,"endColumn":36},{"ruleId":"121","severity":1,"message":"128","line":11,"column":10,"nodeType":"123","messageId":"124","endLine":11,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":54,"column":9,"nodeType":"131","endLine":54,"endColumn":68},{"ruleId":"121","severity":1,"message":"132","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":14},{"ruleId":"129","severity":1,"message":"130","line":10,"column":11,"nodeType":"131","endLine":10,"endColumn":65},{"ruleId":"129","severity":1,"message":"130","line":17,"column":11,"nodeType":"131","endLine":17,"endColumn":63},{"ruleId":"121","severity":1,"message":"133","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":24},{"ruleId":"121","severity":1,"message":"134","line":5,"column":26,"nodeType":"123","messageId":"124","endLine":5,"endColumn":43},{"ruleId":"121","severity":1,"message":"135","line":11,"column":20,"nodeType":"123","messageId":"124","endLine":11,"endColumn":31},{"ruleId":"121","severity":1,"message":"128","line":9,"column":10,"nodeType":"123","messageId":"124","endLine":9,"endColumn":23},{"ruleId":"121","severity":1,"message":"136","line":23,"column":10,"nodeType":"123","messageId":"124","endLine":23,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":28,"column":6,"nodeType":"139","endLine":28,"endColumn":8,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":185,"column":19,"nodeType":"143","endLine":185,"endColumn":47},{"ruleId":"121","severity":1,"message":"144","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":14},{"ruleId":"121","severity":1,"message":"145","line":12,"column":9,"nodeType":"123","messageId":"124","endLine":12,"endColumn":24},{"ruleId":"121","severity":1,"message":"146","line":4,"column":3,"nodeType":"123","messageId":"124","endLine":4,"endColumn":7},{"ruleId":"121","severity":1,"message":"147","line":6,"column":3,"nodeType":"123","messageId":"124","endLine":6,"endColumn":12},{"ruleId":"121","severity":1,"message":"148","line":22,"column":19,"nodeType":"123","messageId":"124","endLine":22,"endColumn":29},{"ruleId":"121","severity":1,"message":"149","line":24,"column":10,"nodeType":"123","messageId":"124","endLine":24,"endColumn":18},{"ruleId":"121","severity":1,"message":"150","line":25,"column":10,"nodeType":"123","messageId":"124","endLine":25,"endColumn":16},{"ruleId":"121","severity":1,"message":"151","line":26,"column":9,"nodeType":"123","messageId":"124","endLine":26,"endColumn":16},{"ruleId":"121","severity":1,"message":"152","line":28,"column":9,"nodeType":"123","messageId":"124","endLine":28,"endColumn":22},{"ruleId":"121","severity":1,"message":"153","line":68,"column":9,"nodeType":"123","messageId":"124","endLine":68,"endColumn":18},{"ruleId":"137","severity":1,"message":"154","line":76,"column":6,"nodeType":"139","endLine":76,"endColumn":8,"suggestions":"155"},{"ruleId":"121","severity":1,"message":"144","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":3,"column":27,"nodeType":"123","messageId":"124","endLine":3,"endColumn":36},{"ruleId":"121","severity":1,"message":"156","line":79,"column":9,"nodeType":"123","messageId":"124","endLine":79,"endColumn":14},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Home' is defined but never used.","'About' is defined but never used.","'passwordCheck' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'movies' is defined but never used.","'emailValidator' is defined but never used.","'passwordValidator' is defined but never used.","'setWarnings' is assigned a value but never used.","'scraps' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["159"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'MvRate' is defined but never used.","'handleStarClick' is assigned a value but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'setLoading' is assigned a value but never used.","'filtered' is assigned a value but never used.","'genres' is assigned a value but never used.","'history' is assigned a value but never used.","'getGenreArray' is assigned a value but never used.","'filtPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.",["160"],"'match' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [getData]",{"range":"165","text":"166"},"Update the dependencies array to be: [getPosts]",{"range":"167","text":"168"},[773,775],"[getData]",[2058,2060],"[getPosts]"]